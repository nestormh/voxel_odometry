cmake_minimum_required(VERSION 2.8.3)
project(voxel_odometry)

# If you are compiling for other versions, change this variable

INCLUDE("voxel_odometry.cmake")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  tf
  tf2_ros
  tf_conversions
  cv_bridge
  image_transport
  camera_calibration_parsers
  message_generation
  message_filters
  image_geometry
  elas
  pcl_ros
)

string(REGEX MATCH "indigo$"
       ros_version ${pluginlib_PREFIX})

set(ROS_BUILD_TYPE Release)

# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -ffast-math -unroll-loops -march=native -fopenmp -msse3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math -unroll-loops -march=native -fopenmp -msse3")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math -unroll-loops -march=native -std=c++0x -fopenmp")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -ffast-math -march=native -std=c++0x")
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})

find_package(catkin)
if (ros_version EQUAL indigo)
  find_package(cmake_modules REQUIRED)
endif (ros_version EQUAL indigo)
# find_package(OMPL    REQUIRED )
# find_package(Boost REQUIRED)
# set(Boost_USE_STATIC_LIBS OFF) 
# set(Boost_USE_MULTITHREADED ON)  
# set(Boost_USE_STATIC_RUNTIME OFF) 
find_package(Boost COMPONENTS filesystem system)
# find_package(Boost 1.49.0)
# find_package(CUDA 5.0 REQUIRED)
# find_package( Eigen3    REQUIRED )
# find_package(Eigen REQUIRED)
find_package(OpenCV  REQUIRED )
# find_package(Motif  REQUIRED )
# find_package(Protobuf REQUIRED)
# find_package(Threads REQUIRED)
# find_package(OpenMP REQUIRED)
# find_package(OpenGL REQUIRED)
# find_package(GLUT REQUIRED)
# find_package(PCL REQUIRED)
find_package(PCL 1.6 REQUIRED)
# find_package(CGAL REQUIRED)
# find_package(GMP REQUIRED)
# find_package(MPFR REQUIRED)

# INCLUDE("${POLAR_CALIBRATION_PATH}/PolarCalibration.cmake")
# INCLUDE("libs/libElas.cmake")

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

#######################################
## Declare ROS messages and services ##
#######################################

## Generate messages in the 'msg' folder
add_message_files(
  FILES
#   point_2d.msg
#   Vector2.msg
#   roi_and_speed_2d.msg
#   roi_and_speed_3d.msg
#   roiArray.msg
  stats.msg
)

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
  geometry_msgs
  voxel_odometry
)

# generate_messages()

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projectsa
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES polar_grid_tracking_ros
 CATKIN_DEPENDS 
    roscpp 
    std_msgs 
    tf 
    tf2_ros 
    cv_bridge 
    image_transport 
    camera_calibration_parsers 
    message_runtime 
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
  src
)


## Declare a cpp library
# add_library(polar_grid_tracking_ros
#   src/${PROJECT_NAME}/polar_grid_tracking_ros.cpp
# )

## Declare a cpp executable
# add_executable(polar_grid_tracking_ros_node src/polar_grid_tracking_ros_node.cpp)
add_subdirectory(src)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(polar_grid_tracking_ros_node polar_grid_tracking_ros_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(polar_grid_tracking_ros_node
# #   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS polar_grid_tracking_ros polar_grid_tracking_ros_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_polar_grid_tracking_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)