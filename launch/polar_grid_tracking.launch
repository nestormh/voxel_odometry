<launch>
    <arg name="namespace" default="voxel_grid_tracking"/>
    <arg name="test_name" default="eth"/>
    <arg name="use_elas" default="true"/>
    <arg name="use_rsgm" default="false"/>
    <arg name="do_evaluation" default="true"/>
    <arg name="evaluation_path" default="/local/imaged/research_data/voxel_tracking/testPolarGridTracking"/>
    <arg name="evaluation_header" default="This is a header"/>
    <arg name="voxel_tracking_params_file" 
         default="$(find voxel_grid_tracking)/params/voxel_tracking_default_params.yaml"/>
    <arg name="disparity_filters_params_file" 
         default="$(find disparity_filters)/params/disparity_filters_params.yaml"/>
    <arg name="wait_time_stereo_and_odom" default="2000"/>
    <arg name="use_rviz" default="false"/>
    
    <param name="use_sim_time" value="true"/>
    
<!--     <node pkg="tf" type="static_transform_publisher" name="map2odom" args="0 0 0 0 0 -1.57 map odom 100" /> -->
<!--     <node pkg="tf" type="static_transform_publisher" name="odom2baselink" args="0 0 0 0 0 0 odom base_link 100" /> -->
<!--     <node pkg="tf" type="static_transform_publisher" name="baselink2basefootprint" args="0 0 0 0 0 0 base_link base_footprint 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="baselink2leftcam" args="0 0 0.4 0 0 0 base_footprint left_cam 100" /> -->
<!--     <node pkg="tf" type="static_transform_publisher" name="basefootprint2baseleftcam" args="0 -0.4 0 0 0 0 base_footprint base_left_cam 100" /> -->
    
<!--     <node pkg="tf" type="static_transform_publisher" name="basefootprint2baseleftcam" args="0.27 0 -1.45 0 0 0 base_footprint base_left_cam 100" /> -->
    <node pkg="tf" type="static_transform_publisher" name="map2odom" args="0 0 0 0 0 0 map odom 100" />
    
    <!--     <node pkg="tf" type="static_transform_publisher" name="odom2basefootprint" args="0 0 0 0 0 0 odom base_footprint 100" /> -->
    
    <node pkg="tf" type="static_transform_publisher" name="basefootprint2baselink" args="0 0 0 -1.57 0 0 base_footprint base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="baselink2baseleftcam" args="0.27 0 1.45 0 0 -1.57079632679489661923 base_link base_left_cam 100" />
    
    <node pkg="tf" type="static_transform_publisher" name="baseleftcam2leftcam_old" args="0 0 0 0 0 1.57 base_left_cam left_cam_old 100" />
    <node pkg="tf" type="static_transform_publisher" name="leftcam_old2leftcam" args="0 0 0 0 0 -1.57 left_cam_old left_cam 100" />
    
    <node pkg="viso2_ros" type="stereo_odometer" name="stereo_odometer" output="screen" required="true">
        <!--         <remap from="stereo" to="$(arg namespace)/stereo_and_odom"/> -->
        <param name="base_link_frame_id" value="base_footprint" />
        <param name="odom_frame_id" value="odom" />
        
        <remap from="stereo/left/image" to="$(arg namespace)/stereo_and_odom/left/image_rect"/>
        <remap from="stereo/right/image" to="$(arg namespace)/stereo_and_odom/right/image_rect"/>
        <remap from="stereo/left/camera_info" to="$(arg namespace)/stereo_and_odom/left/camera_info"/>
        <remap from="stereo/right/camera_info" to="$(arg namespace)/stereo_and_odom/right/camera_info"/>
    </node>
    
    <group ns="$(arg namespace)">
        
        <!--     <node launch-prefix="gdb -ex run &#45;&#45;args" name="stereo_and_odom" pkg="voxel_grid_tracking" type="stereo_and_odom" output="screen" required="true" > -->
        <node name="stereo_and_odom" pkg="voxel_grid_tracking" type="stereo_and_odom" output="screen" required="true" >
            <param name="wait_time" value="$(arg wait_time_stereo_and_odom)" />
        </node> 
        
        <group ns="stereo_and_odom">
            <node name="stereo_image_proc" pkg="stereo_image_proc" type="stereo_image_proc" output="screen" required="true" >
            </node>
        </group>
        
        <group if="$(arg use_elas)">
            <node pkg="grull_elas_ros" type="elas_ros" name="elas_ros" output="screen">
                <remap from="stereo" to="stereo_and_odom" />
                <remap from="stereo_and_odom/left/$(arg namespace)/image" to="stereo_and_odom/left/image_rect_color" />
                <remap from="stereo_and_odom/right/$(arg namespace)/image" to="stereo_and_odom/right/image_rect_color" />
                <remap from="~depth" to="/$(arg namespace)/depth" />
                <remap from="~disparity" to="/$(arg namespace)/disparity" />
                
                <param name="approximate_sync" value="true" />
                
                <!--             <remap from="base_frame_id" to="left_cam" /> -->
                <param name="base_frame_id" value="left_cam" />
                <param name="pose_frame_id" value="base_link" /> 
            </node>
        </group>
        
        <group if="$(arg use_rsgm)">
            <node pkg="rsgm_ros" type="rsgm_ros" name="rsgm_ros" output="screen" required="false">
                <remap from="stereo" to="stereo_and_odom" />
                <remap from="stereo_and_odom/left/$(arg namespace)/image" to="stereo_and_odom/left/image_rect_color" />
                <remap from="stereo_and_odom/right/$(arg namespace)/image" to="stereo_and_odom/right/image_rect_color" />
                <remap from="~depth" to="/$(arg namespace)/depth" />
                <remap from="~disparity" to="/$(arg namespace)/disparity" />
                
                <rosparam file="$(find rsgm_ros)/params/rsgm_ros_params.yaml" command="load" ns="" />
            </node>
        </group>
        
        <!--        <node pkg="oflow_3d_generator" type="oflow_3d_generator" name="oflow_3d_generator" output="screen" required="true">
        <remap from="stereo" to="stereo_and_odom" />
        <remap from="stereo_and_odom/left/$(arg namespace)/image" to="stereo_and_odom/left/image" />
        <remap from="stereo_and_odom/right/$(arg namespace)/image" to="stereo_and_odom/right/image" />
        <remap from="stereo_and_odom/disparity/$(arg namespace)/image" to="rsgm_ros/disparity" />
        
        <param name="approximate_sync" value="true" />
        
        <param name="motion_frame_id" value="map" />
        </node>-->
        
        <!--         <node launch-prefix="gdb &#45;&#45;args" name="polar_grid_tracking" pkg="voxel_grid_tracking" type="voxel_grid_tracking" output="screen" required="true" > -->
        <!--         <node launch-prefix="gdb -ex run &#45;&#45;args" name="polar_grid_tracking" pkg="voxel_grid_tracking" type="voxel_grid_tracking" output="screen" required="true" > -->
        <node name="polar_grid_tracking" pkg="voxel_grid_tracking" type="polar_grid_tracking" output="screen" required="true" >
            <remap from="~/deltaTime"
                   to="/$(arg namespace)/stereo_and_odom/deltaTime" />
            <remap from="~/inputPointCloud"
                   to="/$(arg namespace)/obstaclesPointCloud" />
            <remap from="~/flow_vectors"
                   to="/$(arg namespace)/flow_vectors" />
            <!--             <remap from="~/camera_info" -->
            <!--                    to="/$(arg namespace)/stereo_and_odom/left/camera_info" /> -->
            <remap from="~/left/camera_info"
                   to="/$(arg namespace)/stereo_and_odom/left/camera_info" />
            <remap from="~/right/camera_info"
                   to="/$(arg namespace)/stereo_and_odom/right/camera_info" />
            <remap from="~/dbg/image_rect_color"
                   to="/$(arg namespace)/stereo_and_odom/left/image_rect_color" />
            
            <rosparam file="$(arg voxel_tracking_params_file)" command="load" ns="" />
        </node>
        
        <group if="$(arg do_evaluation)">
            <node name="voxel_tracker_evaluation" pkg="voxel_tracker_evaluation" type="voxel_tracker_evaluation" output="screen" required="true" >
                <param name="path_location" value="$(arg evaluation_path)"/>
                <param name="header" value="$(arg evaluation_header)"/>
                
                <rosparam file="$(find voxel_grid_tracking)/params/$(arg test_name).yaml" command="load" ns="" />
                
                <remap from="/$(arg namespace)/stereo" to="/$(arg namespace)/stereo_and_odom" />
                <remap from="~/rois_array_rt"
                       to="/$(arg namespace)/polar_grid_tracking/result_rois" />
                <remap from="~/rois_array_gt"
                       to="/$(arg namespace)/stereo_and_odom/ground_truth" />
                <remap from="~/time_stats"
                       to="/$(arg namespace)/polar_grid_tracking/time_stats" />
            </node>
        </group>
    </group>
        
    <group ns="filters">
        <!-- PCL Manager -->
        <node pkg="nodelet" type="nodelet" name="box_filter_manager" args="manager" output="screen" required="true" />

        <include file="$(find grull_transform_pointcloud)/launch/launch.launch">
            <arg name="nodelet_name"     value="cam2oldcam_pc_transform" />
            <arg name="input_topic"     value="/$(arg namespace)/elas_ros/point_cloud" />
            <arg name="output_topic"    value="/$(arg namespace)/point_cloud_oldcam"/>
            <arg name="target_frame"    value="left_cam_old"/>
            <arg name="nodelet_manager" value="box_filter_manager"/>
        </include>
        
        <!-- Run a passthrough filter to delimit in x direction -->
        <node pkg="nodelet" type="nodelet" name="psx" args="load pcl/PassThrough box_filter_manager" output="screen">
            <remap from="~input" to="/$(arg namespace)/point_cloud_oldcam" />
            <rosparam>
                filter_field_name: x
                filter_limit_min: -4.0
                filter_limit_max: 4.0
            </rosparam>
        </node>
        
        <!-- Run a passthrough filter to delimit in y direction -->
        <node pkg="nodelet" type="nodelet" name="psy" args="load pcl/PassThrough box_filter_manager" output="screen">
            <remap from="~input" to="psx/output" />
            <rosparam>
                filter_field_name: y
                filter_limit_min: 0.0
                filter_limit_max: 24.0
            </rosparam>
        </node>
        
        <!-- Run a passthrough filter to delimit in z direction -->
        <node pkg="nodelet" type="nodelet" name="psz" args="load pcl/PassThrough box_filter_manager" output="screen">
            <remap from="~input" to="psy/output" />
<!--             <remap from="~output" to="/$(arg namespace)/obstaclesPointCloud" /> -->
            <rosparam>
                filter_field_name: z
                filter_limit_min: -0.1
                filter_limit_max: 3.5
            </rosparam>
        </node>

<!--         <rosparam file="$(find voxel_grid_tracking)/params/$(arg test_name).yaml" command="load" ns="" /> -->

        <include file="$(find grull_transform_pointcloud)/launch/launch.launch">
            <arg name="nodelet_name"     value="oldcam2baseleftcam_pc_transform" />
            <arg name="input_topic"     value="psz/output" />
            <arg name="output_topic"    value="/$(arg namespace)/obstaclesPointCloud"/>
            <arg name="target_frame"    value="base_left_cam"/>
            <arg name="nodelet_manager" value="box_filter_manager"/>
        </include>
    </group>
            
    <group if="$(arg use_rviz)">
        <!-- <node launch-prefix="optirun" pkg="rviz" type="rviz" name="rviz" required="false"  args="&#45;&#45;display-config  -->
        <node pkg="rviz" type="rviz" name="rviz" required="false"  args="&#45;&#45;display-config 
                $(find voxel_grid_tracking)/config/polar_grid_tracking.rviz"/>
        <!--<node pkg="rosbag" type="record"  name="rosbag"
        args="-o /tmp/2011_09_26_drive_0091_sync_" />-->
    </group>
    
</launch>